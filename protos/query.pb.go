// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnumQueryStatus int32

const (
	EnumQueryStatus_SILENT    EnumQueryStatus = 0
	EnumQueryStatus_SUBMIT    EnumQueryStatus = 1
	EnumQueryStatus_START     EnumQueryStatus = 2
	EnumQueryStatus_DONE      EnumQueryStatus = 3
	EnumQueryStatus_ERROR     EnumQueryStatus = 4
	EnumQueryStatus_CANCELING EnumQueryStatus = 5
)

var EnumQueryStatus_name = map[int32]string{
	0: "SILENT",
	1: "SUBMIT",
	2: "START",
	3: "DONE",
	4: "ERROR",
	5: "CANCELING",
}
var EnumQueryStatus_value = map[string]int32{
	"SILENT":    0,
	"SUBMIT":    1,
	"START":     2,
	"DONE":      3,
	"ERROR":     4,
	"CANCELING": 5,
}

func (x EnumQueryStatus) String() string {
	return proto.EnumName(EnumQueryStatus_name, int32(x))
}
func (EnumQueryStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type DistributedNodeKey struct {
	SegId  int32 `protobuf:"varint,1,opt,name=seg_id,json=segId" json:"seg_id,omitempty"`
	ProcId int32 `protobuf:"varint,2,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	NodeId int32 `protobuf:"varint,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *DistributedNodeKey) Reset()                    { *m = DistributedNodeKey{} }
func (m *DistributedNodeKey) String() string            { return proto.CompactTextString(m) }
func (*DistributedNodeKey) ProtoMessage()               {}
func (*DistributedNodeKey) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DistributedNodeKey) GetSegId() int32 {
	if m != nil {
		return m.SegId
	}
	return 0
}

func (m *DistributedNodeKey) GetProcId() int32 {
	if m != nil {
		return m.ProcId
	}
	return 0
}

func (m *DistributedNodeKey) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

type PlumInstrument struct {
	Key           *DistributedNodeKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Running       bool                `protobuf:"varint,2,opt,name=running" json:"running,omitempty"`
	FirstTuple    float64             `protobuf:"fixed64,3,opt,name=first_tuple,json=firstTuple" json:"first_tuple,omitempty"`
	TupleCount    float64             `protobuf:"fixed64,4,opt,name=tuple_count,json=tupleCount" json:"tuple_count,omitempty"`
	StartUp       float64             `protobuf:"fixed64,5,opt,name=start_up,json=startUp" json:"start_up,omitempty"`
	Total         float64             `protobuf:"fixed64,6,opt,name=total" json:"total,omitempty"`
	Ntuples       float64             `protobuf:"fixed64,7,opt,name=ntuples" json:"ntuples,omitempty"`
	Nloops        float64             `protobuf:"fixed64,8,opt,name=nloops" json:"nloops,omitempty"`
	ExecMemUsed   float64             `protobuf:"fixed64,9,opt,name=exec_mem_used,json=execMemUsed" json:"exec_mem_used,omitempty"`
	WorkMemUsed   float64             `protobuf:"fixed64,10,opt,name=work_mem_used,json=workMemUsed" json:"work_mem_used,omitempty"`
	WorkMemWanted float64             `protobuf:"fixed64,11,opt,name=work_mem_wanted,json=workMemWanted" json:"work_mem_wanted,omitempty"`
}

func (m *PlumInstrument) Reset()                    { *m = PlumInstrument{} }
func (m *PlumInstrument) String() string            { return proto.CompactTextString(m) }
func (*PlumInstrument) ProtoMessage()               {}
func (*PlumInstrument) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PlumInstrument) GetKey() *DistributedNodeKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PlumInstrument) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *PlumInstrument) GetFirstTuple() float64 {
	if m != nil {
		return m.FirstTuple
	}
	return 0
}

func (m *PlumInstrument) GetTupleCount() float64 {
	if m != nil {
		return m.TupleCount
	}
	return 0
}

func (m *PlumInstrument) GetStartUp() float64 {
	if m != nil {
		return m.StartUp
	}
	return 0
}

func (m *PlumInstrument) GetTotal() float64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PlumInstrument) GetNtuples() float64 {
	if m != nil {
		return m.Ntuples
	}
	return 0
}

func (m *PlumInstrument) GetNloops() float64 {
	if m != nil {
		return m.Nloops
	}
	return 0
}

func (m *PlumInstrument) GetExecMemUsed() float64 {
	if m != nil {
		return m.ExecMemUsed
	}
	return 0
}

func (m *PlumInstrument) GetWorkMemUsed() float64 {
	if m != nil {
		return m.WorkMemUsed
	}
	return 0
}

func (m *PlumInstrument) GetWorkMemWanted() float64 {
	if m != nil {
		return m.WorkMemWanted
	}
	return 0
}

type QueryInfo struct {
	QueryId    string                     `protobuf:"bytes,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Database   string                     `protobuf:"bytes,2,opt,name=database" json:"database,omitempty"`
	User       string                     `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	SubmitTime *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=submit_time,json=submitTime" json:"submit_time,omitempty"`
	StartTime  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	Status     EnumQueryStatus            `protobuf:"varint,7,opt,name=status,enum=protos.EnumQueryStatus" json:"status,omitempty"`
}

func (m *QueryInfo) Reset()                    { *m = QueryInfo{} }
func (m *QueryInfo) String() string            { return proto.CompactTextString(m) }
func (*QueryInfo) ProtoMessage()               {}
func (*QueryInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *QueryInfo) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryInfo) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *QueryInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *QueryInfo) GetSubmitTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.SubmitTime
	}
	return nil
}

func (m *QueryInfo) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *QueryInfo) GetFinishTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.FinishTime
	}
	return nil
}

func (m *QueryInfo) GetStatus() EnumQueryStatus {
	if m != nil {
		return m.Status
	}
	return EnumQueryStatus_SILENT
}

func init() {
	proto.RegisterType((*DistributedNodeKey)(nil), "protos.DistributedNodeKey")
	proto.RegisterType((*PlumInstrument)(nil), "protos.PlumInstrument")
	proto.RegisterType((*QueryInfo)(nil), "protos.QueryInfo")
	proto.RegisterEnum("protos.EnumQueryStatus", EnumQueryStatus_name, EnumQueryStatus_value)
}

func init() { proto.RegisterFile("query.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xe9, 0x9f, 0xa4, 0xcd, 0x89, 0xba, 0x45, 0x16, 0xb0, 0xd0, 0x9b, 0xa1, 0x5e, 0x20,
	0x84, 0x50, 0x2b, 0x8d, 0x2b, 0xb4, 0xab, 0xd1, 0x55, 0x28, 0x62, 0xeb, 0xc0, 0x4d, 0x05, 0x37,
	0x28, 0x4a, 0x6b, 0xb7, 0x44, 0x6b, 0xec, 0x10, 0xdb, 0x1a, 0x7d, 0x37, 0x5e, 0x89, 0x77, 0x40,
	0x3e, 0x6e, 0x86, 0xc4, 0x2e, 0x76, 0x55, 0x7f, 0xdf, 0xf7, 0x3b, 0xb5, 0x7b, 0xce, 0x29, 0x84,
	0x3f, 0x0d, 0xaf, 0xf7, 0xe3, 0xaa, 0x96, 0x5a, 0x12, 0x1f, 0x3f, 0xd4, 0xf0, 0x74, 0x2b, 0xe5,
	0x76, 0xc7, 0x27, 0x28, 0x57, 0x66, 0x33, 0xd1, 0x45, 0xc9, 0x95, 0xce, 0xcb, 0xca, 0x81, 0xa3,
	0xef, 0x40, 0x2e, 0x0b, 0xa5, 0xeb, 0x62, 0x65, 0x34, 0x67, 0x73, 0xc9, 0xf8, 0x27, 0xbe, 0x27,
	0xcf, 0xc0, 0x57, 0x7c, 0x9b, 0x15, 0x2c, 0x6e, 0xbd, 0x6c, 0xbd, 0xf6, 0xa8, 0xa7, 0xf8, 0x36,
	0x61, 0xe4, 0x04, 0x7a, 0x55, 0x2d, 0xd7, 0xd6, 0x6f, 0xa3, 0x6f, 0xaf, 0x59, 0xbb, 0x40, 0x48,
	0xc6, 0x6d, 0xd0, 0x71, 0x81, 0x95, 0x09, 0x1b, 0xfd, 0x69, 0xc3, 0xd1, 0xe7, 0x9d, 0x29, 0x13,
	0xa1, 0x74, 0x6d, 0x4a, 0x2e, 0x34, 0x79, 0x0b, 0x9d, 0x5b, 0xbe, 0xc7, 0x2f, 0x0e, 0xcf, 0x86,
	0xee, 0x19, 0x6a, 0xfc, 0xf0, 0x11, 0xd4, 0x62, 0x24, 0x86, 0x5e, 0x6d, 0x84, 0x28, 0xc4, 0x16,
	0xaf, 0xec, 0xd3, 0x46, 0x92, 0x53, 0x08, 0x37, 0x45, 0xad, 0x74, 0xa6, 0x4d, 0xb5, 0xe3, 0x78,
	0x6f, 0x8b, 0x02, 0x5a, 0xa9, 0x75, 0x2c, 0x80, 0x51, 0xb6, 0x96, 0x46, 0xe8, 0xb8, 0xeb, 0x00,
	0xb4, 0xa6, 0xd6, 0x21, 0x2f, 0xa0, 0xaf, 0x74, 0x5e, 0xeb, 0xcc, 0x54, 0xb1, 0x87, 0x69, 0x0f,
	0xf5, 0xb2, 0x22, 0x4f, 0xc1, 0xd3, 0x52, 0xe7, 0xbb, 0xd8, 0x47, 0xdf, 0x09, 0xfb, 0x18, 0x81,
	0xf5, 0x2a, 0xee, 0x39, 0xfe, 0x20, 0xc9, 0x73, 0xf0, 0xc5, 0x4e, 0xca, 0x4a, 0xc5, 0x7d, 0x0c,
	0x0e, 0x8a, 0x8c, 0x60, 0xc0, 0x7f, 0xf1, 0x75, 0x56, 0xf2, 0x32, 0x33, 0x8a, 0xb3, 0x38, 0xc0,
	0x38, 0xb4, 0xe6, 0x35, 0x2f, 0x97, 0x8a, 0x33, 0xcb, 0xdc, 0xc9, 0xfa, 0xf6, 0x1f, 0x03, 0x8e,
	0xb1, 0x66, 0xc3, 0xbc, 0x82, 0xe3, 0x7b, 0xe6, 0x2e, 0x17, 0x9a, 0xb3, 0x38, 0x44, 0x6a, 0x70,
	0xa0, 0xbe, 0xa2, 0x39, 0xfa, 0xdd, 0x86, 0xe0, 0x8b, 0xdd, 0x83, 0x44, 0x6c, 0xa4, 0xfd, 0x81,
	0xb8, 0x14, 0xcd, 0x20, 0x03, 0xda, 0x43, 0x9d, 0x30, 0x32, 0x84, 0x3e, 0xcb, 0x75, 0xbe, 0xca,
	0x15, 0xc7, 0xc6, 0x06, 0xf4, 0x5e, 0x13, 0x02, 0x5d, 0xa3, 0x78, 0x8d, 0x2d, 0x0d, 0x28, 0x9e,
	0xc9, 0x39, 0x84, 0xca, 0xac, 0xca, 0x42, 0x67, 0x76, 0x83, 0xb0, 0x99, 0x76, 0x7a, 0x6e, 0xbd,
	0xc6, 0xcd, 0x7a, 0x8d, 0xd3, 0x66, 0xbd, 0x28, 0x38, 0xdc, 0x1a, 0xe4, 0x3d, 0x80, 0x6b, 0x34,
	0xd6, 0x7a, 0x8f, 0xd6, 0x06, 0x48, 0x63, 0xe9, 0xb9, 0x9d, 0xb2, 0x28, 0xd4, 0x0f, 0x57, 0xeb,
	0x3f, 0x7e, 0xaf, 0xc3, 0xb1, 0x78, 0x02, 0xbe, 0xd2, 0xb9, 0x36, 0x6e, 0x5c, 0x47, 0x67, 0x27,
	0xcd, 0xb6, 0xcd, 0x84, 0x29, 0xb1, 0x4d, 0x0b, 0x8c, 0xe9, 0x01, 0x7b, 0xf3, 0x0d, 0x8e, 0xff,
	0x8b, 0x08, 0x80, 0xbf, 0x48, 0xae, 0x66, 0xf3, 0x34, 0x7a, 0x82, 0xe7, 0xe5, 0x87, 0xeb, 0x24,
	0x8d, 0x5a, 0x24, 0x00, 0x6f, 0x91, 0x5e, 0xd0, 0x34, 0x6a, 0x93, 0x3e, 0x74, 0x2f, 0x6f, 0xe6,
	0xb3, 0xa8, 0x63, 0xcd, 0x19, 0xa5, 0x37, 0x34, 0xea, 0x92, 0x01, 0x04, 0xd3, 0x8b, 0xf9, 0x74,
	0x76, 0x95, 0xcc, 0x3f, 0x46, 0xde, 0xca, 0xfd, 0x21, 0xdf, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x89, 0x0a, 0xb6, 0x7a, 0xa6, 0x03, 0x00, 0x00,
}
