// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SystemCpu struct {
	User uint64 `protobuf:"varint,2,opt,name=user" json:"user,omitempty"`
	Sys  uint64 `protobuf:"varint,3,opt,name=sys" json:"sys,omitempty"`
	Idle uint64 `protobuf:"varint,4,opt,name=idle" json:"idle,omitempty"`
}

func (m *SystemCpu) Reset()                    { *m = SystemCpu{} }
func (m *SystemCpu) String() string            { return proto.CompactTextString(m) }
func (*SystemCpu) ProtoMessage()               {}
func (*SystemCpu) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *SystemCpu) GetUser() uint64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *SystemCpu) GetSys() uint64 {
	if m != nil {
		return m.Sys
	}
	return 0
}

func (m *SystemCpu) GetIdle() uint64 {
	if m != nil {
		return m.Idle
	}
	return 0
}

type ProcCpuPercent struct {
	Pid     int32   `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Percent float64 `protobuf:"fixed64,2,opt,name=percent" json:"percent,omitempty"`
}

func (m *ProcCpuPercent) Reset()                    { *m = ProcCpuPercent{} }
func (m *ProcCpuPercent) String() string            { return proto.CompactTextString(m) }
func (*ProcCpuPercent) ProtoMessage()               {}
func (*ProcCpuPercent) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ProcCpuPercent) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcCpuPercent) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type ProcMemPercent struct {
	Pid     int32   `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Percent float64 `protobuf:"fixed64,2,opt,name=percent" json:"percent,omitempty"`
}

func (m *ProcMemPercent) Reset()                    { *m = ProcMemPercent{} }
func (m *ProcMemPercent) String() string            { return proto.CompactTextString(m) }
func (*ProcMemPercent) ProtoMessage()               {}
func (*ProcMemPercent) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *ProcMemPercent) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcMemPercent) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type ProcMemInfo struct {
	Pid  int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	RSS  uint64 `protobuf:"varint,2,opt,name=RSS" json:"RSS,omitempty"`
	VMS  uint64 `protobuf:"varint,3,opt,name=VMS" json:"VMS,omitempty"`
	Swap uint64 `protobuf:"varint,4,opt,name=Swap" json:"Swap,omitempty"`
}

func (m *ProcMemInfo) Reset()                    { *m = ProcMemInfo{} }
func (m *ProcMemInfo) String() string            { return proto.CompactTextString(m) }
func (*ProcMemInfo) ProtoMessage()               {}
func (*ProcMemInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *ProcMemInfo) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcMemInfo) GetRSS() uint64 {
	if m != nil {
		return m.RSS
	}
	return 0
}

func (m *ProcMemInfo) GetVMS() uint64 {
	if m != nil {
		return m.VMS
	}
	return 0
}

func (m *ProcMemInfo) GetSwap() uint64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func init() {
	proto.RegisterType((*SystemCpu)(nil), "protos.SystemCpu")
	proto.RegisterType((*ProcCpuPercent)(nil), "protos.ProcCpuPercent")
	proto.RegisterType((*ProcMemPercent)(nil), "protos.ProcMemPercent")
	proto.RegisterType((*ProcMemInfo)(nil), "protos.ProcMemInfo")
}

func init() { proto.RegisterFile("system.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xae, 0x2c, 0x2e,
	0x49, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0xae, 0x5c,
	0x9c, 0xc1, 0x60, 0x71, 0xe7, 0x82, 0x52, 0x21, 0x21, 0x2e, 0x96, 0xd2, 0xe2, 0xd4, 0x22, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x30, 0x5b, 0x48, 0x80, 0x8b, 0xb9, 0xb8, 0xb2, 0x58, 0x82,
	0x19, 0x2c, 0x04, 0x62, 0x82, 0x54, 0x65, 0xa6, 0xe4, 0xa4, 0x4a, 0xb0, 0x40, 0x54, 0x81, 0xd8,
	0x4a, 0x36, 0x5c, 0x7c, 0x01, 0x45, 0xf9, 0xc9, 0xce, 0x05, 0xa5, 0x01, 0xa9, 0x45, 0xc9, 0xa9,
	0x79, 0x25, 0x20, 0x7d, 0x05, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x20, 0xa6,
	0x90, 0x04, 0x17, 0x7b, 0x01, 0x44, 0x12, 0x6c, 0x01, 0x63, 0x10, 0x8c, 0x0b, 0xd3, 0xed, 0x9b,
	0x9a, 0x4b, 0x8e, 0xee, 0x70, 0x2e, 0x6e, 0xa8, 0x6e, 0xcf, 0xbc, 0xb4, 0x7c, 0x2c, 0x5a, 0x05,
	0xb8, 0x98, 0x83, 0x82, 0x83, 0xa1, 0xbe, 0x02, 0x31, 0x41, 0x22, 0x61, 0xbe, 0xc1, 0x30, 0x4f,
	0x85, 0xf9, 0x06, 0x83, 0x3c, 0x15, 0x5c, 0x9e, 0x58, 0x00, 0xf3, 0x14, 0x88, 0x9d, 0x04, 0x09,
	0x23, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0xc6, 0xa6, 0x44, 0x3a, 0x01, 0x00, 0x00,
}
