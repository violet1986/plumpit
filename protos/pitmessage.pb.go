// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pitmessage.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnumPitType int32

const (
	EnumPitType_UNKNOWN          EnumPitType = 0
	EnumPitType_SYSTEM           EnumPitType = 1
	EnumPitType_SYSTEM_CPU       EnumPitType = 2
	EnumPitType_SYSTEM_MEMORY    EnumPitType = 3
	EnumPitType_PROC             EnumPitType = 10
	EnumPitType_PROC_CPU_PERCENT EnumPitType = 11
	EnumPitType_PROC_MEM_INFO    EnumPitType = 12
	EnumPitType_PROC_MEM_PERCENT EnumPitType = 13
	EnumPitType_QUERY_INFO       EnumPitType = 14
	EnumPitType_EXEC_INFO        EnumPitType = 15
	EnumPitType_INSTRUMENT_INFO  EnumPitType = 16
	EnumPitType_PROCESS_INFO     EnumPitType = 20
)

var EnumPitType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SYSTEM",
	2:  "SYSTEM_CPU",
	3:  "SYSTEM_MEMORY",
	10: "PROC",
	11: "PROC_CPU_PERCENT",
	12: "PROC_MEM_INFO",
	13: "PROC_MEM_PERCENT",
	14: "QUERY_INFO",
	15: "EXEC_INFO",
	16: "INSTRUMENT_INFO",
	20: "PROCESS_INFO",
}
var EnumPitType_value = map[string]int32{
	"UNKNOWN":          0,
	"SYSTEM":           1,
	"SYSTEM_CPU":       2,
	"SYSTEM_MEMORY":    3,
	"PROC":             10,
	"PROC_CPU_PERCENT": 11,
	"PROC_MEM_INFO":    12,
	"PROC_MEM_PERCENT": 13,
	"QUERY_INFO":       14,
	"EXEC_INFO":        15,
	"INSTRUMENT_INFO":  16,
	"PROCESS_INFO":     20,
}

func (x EnumPitType) String() string {
	return proto.EnumName(EnumPitType_name, int32(x))
}
func (EnumPitType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type PitMessage struct {
	PitType EnumPitType `protobuf:"varint,1,opt,name=pit_type,json=pitType,enum=protos.EnumPitType" json:"pit_type,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*PitMessage_SystemCpu
	//	*PitMessage_ProcCpuPercent
	//	*PitMessage_ProcMemInfo
	//	*PitMessage_ProcMemPercent
	//	*PitMessage_QueryInfo
	//	*PitMessage_ExecInfo
	//	*PitMessage_Instrument
	//	*PitMessage_ProcInfo
	Message isPitMessage_Message `protobuf_oneof:"message"`
}

func (m *PitMessage) Reset()                    { *m = PitMessage{} }
func (m *PitMessage) String() string            { return proto.CompactTextString(m) }
func (*PitMessage) ProtoMessage()               {}
func (*PitMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isPitMessage_Message interface {
	isPitMessage_Message()
}

type PitMessage_SystemCpu struct {
	SystemCpu *SystemCpu `protobuf:"bytes,2,opt,name=system_cpu,json=systemCpu,oneof"`
}
type PitMessage_ProcCpuPercent struct {
	ProcCpuPercent *ProcCpuPercent `protobuf:"bytes,3,opt,name=proc_cpu_percent,json=procCpuPercent,oneof"`
}
type PitMessage_ProcMemInfo struct {
	ProcMemInfo *ProcMemInfo `protobuf:"bytes,4,opt,name=proc_mem_info,json=procMemInfo,oneof"`
}
type PitMessage_ProcMemPercent struct {
	ProcMemPercent *ProcMemPercent `protobuf:"bytes,5,opt,name=proc_mem_percent,json=procMemPercent,oneof"`
}
type PitMessage_QueryInfo struct {
	QueryInfo *QueryInfo `protobuf:"bytes,6,opt,name=query_info,json=queryInfo,oneof"`
}
type PitMessage_ExecInfo struct {
	ExecInfo *ExecInfo `protobuf:"bytes,7,opt,name=exec_info,json=execInfo,oneof"`
}
type PitMessage_Instrument struct {
	Instrument *PlumInstrument `protobuf:"bytes,8,opt,name=instrument,oneof"`
}
type PitMessage_ProcInfo struct {
	ProcInfo *ProcessSamplingInfo `protobuf:"bytes,9,opt,name=proc_info,json=procInfo,oneof"`
}

func (*PitMessage_SystemCpu) isPitMessage_Message()      {}
func (*PitMessage_ProcCpuPercent) isPitMessage_Message() {}
func (*PitMessage_ProcMemInfo) isPitMessage_Message()    {}
func (*PitMessage_ProcMemPercent) isPitMessage_Message() {}
func (*PitMessage_QueryInfo) isPitMessage_Message()      {}
func (*PitMessage_ExecInfo) isPitMessage_Message()       {}
func (*PitMessage_Instrument) isPitMessage_Message()     {}
func (*PitMessage_ProcInfo) isPitMessage_Message()       {}

func (m *PitMessage) GetMessage() isPitMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PitMessage) GetPitType() EnumPitType {
	if m != nil {
		return m.PitType
	}
	return EnumPitType_UNKNOWN
}

func (m *PitMessage) GetSystemCpu() *SystemCpu {
	if x, ok := m.GetMessage().(*PitMessage_SystemCpu); ok {
		return x.SystemCpu
	}
	return nil
}

func (m *PitMessage) GetProcCpuPercent() *ProcCpuPercent {
	if x, ok := m.GetMessage().(*PitMessage_ProcCpuPercent); ok {
		return x.ProcCpuPercent
	}
	return nil
}

func (m *PitMessage) GetProcMemInfo() *ProcMemInfo {
	if x, ok := m.GetMessage().(*PitMessage_ProcMemInfo); ok {
		return x.ProcMemInfo
	}
	return nil
}

func (m *PitMessage) GetProcMemPercent() *ProcMemPercent {
	if x, ok := m.GetMessage().(*PitMessage_ProcMemPercent); ok {
		return x.ProcMemPercent
	}
	return nil
}

func (m *PitMessage) GetQueryInfo() *QueryInfo {
	if x, ok := m.GetMessage().(*PitMessage_QueryInfo); ok {
		return x.QueryInfo
	}
	return nil
}

func (m *PitMessage) GetExecInfo() *ExecInfo {
	if x, ok := m.GetMessage().(*PitMessage_ExecInfo); ok {
		return x.ExecInfo
	}
	return nil
}

func (m *PitMessage) GetInstrument() *PlumInstrument {
	if x, ok := m.GetMessage().(*PitMessage_Instrument); ok {
		return x.Instrument
	}
	return nil
}

func (m *PitMessage) GetProcInfo() *ProcessSamplingInfo {
	if x, ok := m.GetMessage().(*PitMessage_ProcInfo); ok {
		return x.ProcInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PitMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PitMessage_OneofMarshaler, _PitMessage_OneofUnmarshaler, _PitMessage_OneofSizer, []interface{}{
		(*PitMessage_SystemCpu)(nil),
		(*PitMessage_ProcCpuPercent)(nil),
		(*PitMessage_ProcMemInfo)(nil),
		(*PitMessage_ProcMemPercent)(nil),
		(*PitMessage_QueryInfo)(nil),
		(*PitMessage_ExecInfo)(nil),
		(*PitMessage_Instrument)(nil),
		(*PitMessage_ProcInfo)(nil),
	}
}

func _PitMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PitMessage)
	// message
	switch x := m.Message.(type) {
	case *PitMessage_SystemCpu:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SystemCpu); err != nil {
			return err
		}
	case *PitMessage_ProcCpuPercent:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcCpuPercent); err != nil {
			return err
		}
	case *PitMessage_ProcMemInfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcMemInfo); err != nil {
			return err
		}
	case *PitMessage_ProcMemPercent:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcMemPercent); err != nil {
			return err
		}
	case *PitMessage_QueryInfo:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryInfo); err != nil {
			return err
		}
	case *PitMessage_ExecInfo:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecInfo); err != nil {
			return err
		}
	case *PitMessage_Instrument:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instrument); err != nil {
			return err
		}
	case *PitMessage_ProcInfo:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PitMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _PitMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PitMessage)
	switch tag {
	case 2: // message.system_cpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemCpu)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_SystemCpu{msg}
		return true, err
	case 3: // message.proc_cpu_percent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcCpuPercent)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_ProcCpuPercent{msg}
		return true, err
	case 4: // message.proc_mem_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcMemInfo)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_ProcMemInfo{msg}
		return true, err
	case 5: // message.proc_mem_percent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcMemPercent)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_ProcMemPercent{msg}
		return true, err
	case 6: // message.query_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryInfo)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_QueryInfo{msg}
		return true, err
	case 7: // message.exec_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecInfo)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_ExecInfo{msg}
		return true, err
	case 8: // message.instrument
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlumInstrument)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_Instrument{msg}
		return true, err
	case 9: // message.proc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcessSamplingInfo)
		err := b.DecodeMessage(msg)
		m.Message = &PitMessage_ProcInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PitMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PitMessage)
	// message
	switch x := m.Message.(type) {
	case *PitMessage_SystemCpu:
		s := proto.Size(x.SystemCpu)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PitMessage_ProcCpuPercent:
		s := proto.Size(x.ProcCpuPercent)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PitMessage_ProcMemInfo:
		s := proto.Size(x.ProcMemInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PitMessage_ProcMemPercent:
		s := proto.Size(x.ProcMemPercent)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PitMessage_QueryInfo:
		s := proto.Size(x.QueryInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PitMessage_ExecInfo:
		s := proto.Size(x.ExecInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PitMessage_Instrument:
		s := proto.Size(x.Instrument)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PitMessage_ProcInfo:
		s := proto.Size(x.ProcInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PitMessageBox struct {
	Messages []*PitMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *PitMessageBox) Reset()                    { *m = PitMessageBox{} }
func (m *PitMessageBox) String() string            { return proto.CompactTextString(m) }
func (*PitMessageBox) ProtoMessage()               {}
func (*PitMessageBox) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PitMessageBox) GetMessages() []*PitMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*PitMessage)(nil), "protos.PitMessage")
	proto.RegisterType((*PitMessageBox)(nil), "protos.PitMessageBox")
	proto.RegisterEnum("protos.EnumPitType", EnumPitType_name, EnumPitType_value)
}

func init() { proto.RegisterFile("pitmessage.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0xc5, 0x81, 0x02, 0x1e, 0x03, 0xd9, 0x2c, 0x51, 0x85, 0xd2, 0x0b, 0xca, 0x09, 0xf5, 0x40,
	0x25, 0x7a, 0x69, 0x7b, 0xa9, 0x84, 0xb5, 0x15, 0xa8, 0xb2, 0x71, 0xd6, 0xa0, 0x96, 0x93, 0x95,
	0x5a, 0x9b, 0xc8, 0x52, 0xd6, 0xde, 0x78, 0x6d, 0x09, 0x3e, 0xa5, 0x7f, 0xd6, 0xcf, 0xa9, 0x76,
	0xd7, 0x36, 0x24, 0x39, 0x31, 0xef, 0xcd, 0x7b, 0xf3, 0x76, 0xac, 0x01, 0x90, 0x48, 0x0a, 0xce,
	0xa4, 0xbc, 0x7f, 0x64, 0x73, 0x91, 0x67, 0x45, 0x86, 0xbb, 0xfa, 0x47, 0xde, 0x0c, 0xe4, 0x51,
	0x16, 0x8c, 0x1b, 0xf6, 0xc6, 0x79, 0x2e, 0x59, 0x7e, 0xac, 0xc0, 0x50, 0xe4, 0x59, 0xcc, 0xa4,
	0x34, 0xf0, 0xf6, 0x6f, 0x07, 0x20, 0x48, 0x0a, 0xcf, 0x8c, 0xc1, 0x73, 0xe8, 0x8b, 0xa4, 0x88,
	0x8a, 0xa3, 0x60, 0x13, 0x6b, 0x6a, 0xcd, 0x46, 0x8b, 0xb1, 0x11, 0xca, 0x39, 0x49, 0x4b, 0x1e,
	0x24, 0xc5, 0xf6, 0x28, 0x18, 0xed, 0x09, 0x53, 0xe0, 0x05, 0x80, 0x89, 0x8a, 0x62, 0x51, 0x4e,
	0x2e, 0xa6, 0xd6, 0xcc, 0x59, 0x5c, 0xd5, 0x8e, 0x50, 0x77, 0x5c, 0x51, 0xae, 0x5a, 0xd4, 0x96,
	0x35, 0xc0, 0x4b, 0x40, 0xea, 0x0d, 0xca, 0x11, 0x09, 0x96, 0xc7, 0x2c, 0x2d, 0x26, 0x6d, 0xed,
	0x7c, 0x5f, 0x3b, 0x83, 0x3c, 0x8b, 0x5d, 0x51, 0x06, 0xa6, 0xbb, 0x6a, 0xd1, 0x91, 0x78, 0xc1,
	0xe0, 0xaf, 0xa0, 0xf7, 0x88, 0x38, 0xe3, 0x51, 0x92, 0x3e, 0x64, 0x93, 0x8e, 0x1e, 0x30, 0x3e,
	0x1f, 0xe0, 0x31, 0xbe, 0x4e, 0x1f, 0xb2, 0x55, 0x8b, 0x3a, 0xe2, 0x04, 0x9b, 0x78, 0x65, 0xad,
	0xe3, 0xdf, 0xbd, 0x8d, 0xf7, 0x18, 0x7f, 0x15, 0x7f, 0x62, 0xd4, 0xda, 0xfa, 0x9b, 0x9a, 0xec,
	0xee, 0xcb, 0xb5, 0xef, 0x54, 0xa7, 0x4a, 0xb6, 0x9f, 0x6b, 0x80, 0x3f, 0x81, 0xcd, 0x0e, 0x2c,
	0x36, 0x96, 0x9e, 0xb6, 0xa0, 0xe6, 0xdb, 0x1e, 0x58, 0x5c, 0x39, 0xfa, 0xac, 0xaa, 0xf1, 0x17,
	0x80, 0x24, 0x95, 0x45, 0x5e, 0x72, 0xf5, 0xc4, 0xfe, 0xab, 0x27, 0x3e, 0x95, 0x7c, 0xdd, 0x74,
	0x57, 0x2d, 0x7a, 0xa6, 0xc5, 0xdf, 0xc0, 0xd6, 0x2b, 0xea, 0x28, 0x5b, 0x1b, 0x3f, 0x9c, 0xef,
	0xc6, 0xa4, 0x0c, 0xef, 0xb9, 0x78, 0x4a, 0xd2, 0xc7, 0x3a, 0x55, 0xe9, 0x55, 0xbd, 0xb4, 0xa1,
	0x57, 0xdd, 0xd4, 0xed, 0x77, 0x18, 0x9e, 0x4e, 0x63, 0x99, 0x1d, 0xd4, 0x75, 0x54, 0x3d, 0x39,
	0xb1, 0xa6, 0xed, 0x99, 0xb3, 0xc0, 0xcd, 0xd8, 0x46, 0x48, 0x1b, 0xcd, 0xc7, 0x7f, 0x16, 0x38,
	0x67, 0x67, 0x83, 0x1d, 0xe8, 0xed, 0xfc, 0x9f, 0xfe, 0xe6, 0x97, 0x8f, 0x5a, 0x18, 0xa0, 0x1b,
	0xee, 0xc3, 0x2d, 0xf1, 0x90, 0x85, 0x47, 0x00, 0xa6, 0x8e, 0xdc, 0x60, 0x87, 0x2e, 0xf0, 0x15,
	0x0c, 0x2b, 0xec, 0x11, 0x6f, 0x43, 0xf7, 0xa8, 0x8d, 0xfb, 0xd0, 0x09, 0xe8, 0xc6, 0x45, 0x80,
	0xaf, 0x01, 0xa9, 0x4a, 0x49, 0xa3, 0x80, 0x50, 0x97, 0xf8, 0x5b, 0xe4, 0x28, 0x8b, 0x66, 0x3d,
	0xe2, 0x45, 0x6b, 0xff, 0xc7, 0x06, 0x0d, 0x1a, 0xa1, 0xa2, 0x6a, 0xe1, 0x50, 0x65, 0xdd, 0xed,
	0x08, 0xdd, 0x1b, 0xd5, 0x08, 0x0f, 0xc1, 0x26, 0xbf, 0x89, 0x6b, 0xe0, 0x25, 0x1e, 0xc3, 0xe5,
	0xda, 0x0f, 0xb7, 0x74, 0xe7, 0x11, 0x7f, 0x6b, 0x48, 0x84, 0x11, 0x0c, 0xd4, 0x24, 0x12, 0x86,
	0x86, 0xb9, 0xfe, 0x63, 0xfe, 0x69, 0x9f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xc8, 0x83,
	0x8a, 0x84, 0x03, 0x00, 0x00,
}
